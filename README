This is an implementation of the Firebase Java interface for Google Web
Toolkit. It is an incomplete work-in-progress, but still largely functional.
There are no special runtime dependencies, but tests depend on my common base
class library (https://github.com/thurn/shared-gwttestcase). This needs to be
added as a separate Eclipse project and then depended on by the firebase
project in order to run tests. There are two Eclipse run configurations for
tests, one to run the tests in JS, and another to run the tests in Java against
the actual Firebase java jarfile (in order to verify that the behavior is the
same). This depends on having firebase.jar available on the classpath, of
course.

When you use this library in javascript, you need to have firebase.js already
injected into the GWT iFrame (injecting it at the top-level will not work!).
The best way to accomplish this is via a GWT ScriptInjector.

There are several suprising things about this library. Most significantly,
getting a value out of a DataSnapshot with something like
getValue() doesn't do any of the fancy stuff that firebase.jar does with
automatically instantiating a POJO for you. The only types you're ever going
to get back from getValue() are List, Map, Long, Boolean, or Double. Passing
a specific type to getValue() just attempts to cast to that type, so you can
only expect one of those values.

For simplicity, all numbers are returned as Longs if they can be represented
as such, and are otherwise returned as Doubles. Even if you put a different
type in, like an integer, you're still going to get a java.lang.Long back,
so you need to expect that and plan accordingly in code.

Code is Creative Commons Zero (see COPYING).
